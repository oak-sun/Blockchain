type: edu
files:
- name: src/blockchain/Main.java
  visible: true
  text: |
    package blockchain;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.Objects;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static ArrayList<String> minerIds;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                    && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                    .lines()
                    .map(String::strip)
                    .filter(e -> e.length() > 0)
                    .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                        "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                        "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                        "should start with \"Created by\"");
            }

            minerIds.add(lines.get(1));

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                        "should contain \"gets 100 VC\"");
            }

            //The miner who created the block must be the miner who gets the VC
            Pattern p = Pattern.compile(".*(miner\\d+).*", Pattern.CASE_INSENSITIVE);
            try {
                Matcher m1 = p.matcher(lines.get(1));
                Matcher m2 = p.matcher(lines.get(2));
                if (!m1.find() || !m2.find()){
                    throw new BlockParseException("All miner names should be in the format 'miner#', as in 'miner1'");
                }

                boolean ok = m1.group(1).equals(m2.group(1));
                if (!ok) {
                    throw new BlockParseException("The miner who creates the block must get the VC!");
                }
            } catch (IllegalStateException e) {
                throw new BlockParseException("Illegal state ");
            } catch (IndexOutOfBoundsException e){
                throw new BlockParseException("All miner names should be in the format 'miner#', as in 'miner1'");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                        "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                    .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                        "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                        "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                    .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                        "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                        "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                    || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                        "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                        "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            minerIds = new ArrayList<String>();

            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            String firstMiner = minerIds.get(0);
            minerIds.removeIf(s -> Objects.equals(s, firstMiner));
            if (minerIds.size() == 0){
                throw new BlockParseException("All blocks are mined by a single miner!");
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                    new TestCase<>(),
                    new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                        "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                        "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                            "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                            "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                            "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: Database.txt
  visible: true
  text: "��\0\x05sr\0\eblockchain.block.Blockchain3l`���<\x15\x02\0\x02I\0\x06zeroesL\0\
    \x06blockst\0\x10Ljava/util/List;xp\0\0\0\x02sr\0\x13java.util.ArrayListx��\x1d\
    ��a�\x03\0\x01I\0\x04sizexp\0\0\0\x05w\x04\0\0\0\x05sr\0\x16blockchain.block.Block\x18\
    \ �\x11��zB\x02\0\x06I\0\x02idJ\0\vmagicNumberI\0\x0etimeToGenerateJ\0\ttimestampL\0\
    \tblockHasht\0\x12Ljava/lang/String;L\0\nprevBlockHashq\0~\0\x06xp\0\0\0\0�d\x1d\
    �\x06V+f\0\0\0\0\0\0\x01��\n�\x10t\0@0032ade335adc93aee375ebf9fe7c0734929a4e06dacd2ea3ad7e5e4a631bebdt\0\
    \x010sq\0~\0\x05\0\0\0\x01��]\n �V�\0\0\0\0\0\0\x01��\n�Rt\0@001aba86173044036fc8ea2ea84386fb1b9aad13ad759b5587115793a9ad9163q\0\
    ~\0\bsq\0~\0\x05\0\0\0\x02t��}���\0\0\0\0\0\0\x01��\n�Ut\0@009df7703e0322c96afe254c796b8f355035cf3948531dab3cf22e0145342ae3q\0\
    ~\0\vsq\0~\0\x05\0\0\0\x03�\b\x17��,W�\0\0\0\0\0\0\x01��\n�bt\0@009521a80d64679c72f334fe44507e42bae319b6c27bce6a0ef87f9b7186e90eq\0\
    ~\0\nsq\0~\0\x05\0\0\0\x04��g���U�\0\0\0\0\0\0\x01��\n�vt\0@0045a661f20d5c1a5593a6b7025a41282f9d9b4d4bee2b3a2e8d7c606052a589q\0\
    ~\0\x0fx"
  learner_created: true
- name: src/blockchain/services/CryptoManager.java
  visible: true
  text: |
    package blockchain.services;

    import blockchain.chat.Post;
    import java.security.InvalidKeyException;
    import java.security.NoSuchAlgorithmException;
    import java.security.Signature;
    import java.security.SignatureException;

    public class Verifier {
        public static boolean verify(Post post) {

            Signature signature;
            try {
                signature = Signature
                                    .getInstance("SHA1withRSA");
                signature
                        .initVerify(post.publicKey());
                var data = post.postman() +
                           post.text() +
                           post.dateTime().toString() +
                           post.id();
                signature.update(
                        data.getBytes());
                return signature.verify(
                        post.signature());
            } catch (NoSuchAlgorithmException |
                     InvalidKeyException |
                     SignatureException e) {
                e.printStackTrace();
            }
            return false;
        }
    }
  learner_created: true
- name: src/blockchain/transaction/Transaction.java
  visible: true
  learner_created: true
- name: src/blockchain/services/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/util/StringUtil.java
  visible: true
  text: |-
    package blockchain.util;

    import java.nio.charset.StandardCharsets;
    import java.security.MessageDigest;

    public class StringUtil {
        public static String applySha256(String input){
            try {
                /* Applies sha256 to our input */
                var hash =  MessageDigest
                                  .getInstance("SHA-256")
                                  .digest(input
                                          .getBytes(StandardCharsets.UTF_8));
                var hexString = new StringBuilder();
                for (byte elem: hash) {
                    var hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }

    }
  learner_created: true
- name: src/blockchain/util/Serializer.java
  visible: true
  learner_created: true
- name: src/blockchain/services/TaskManager.java
  visible: true
  text: |
    package blockchain.services;

    import blockchain.block.Blockchain;
    import blockchain.chat.Postman;
    import blockchain.util.Serializer;
    import lombok.AllArgsConstructor;
    import java.util.ArrayList;
    import java.util.List;

    @AllArgsConstructor
    public class Executor {
        Blockchain blockchain;
        public void startBlockchain(int nbOfThreads,
                                    int nbOfBlocksToAdd) {
            var totalNbOfBlocks = nbOfBlocksToAdd +
                                  blockchain.getNbOfBlocks();
            List<Thread> threads = new ArrayList<>(nbOfThreads);

            for (int i = 0; i < nbOfThreads; i++) {
                threads.add(new Thread(
                        new Miner(blockchain, totalNbOfBlocks),
                        "#" + (i + 1)
                ));
                threads.get(i).start();
            }
            startPostman();
            for (Thread t : threads) {
                try {
                    t.join();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        private void startPostman() {
            var postman = new Postman();
            var postThread = new Thread(postman);
            postThread.start();
        }

        public static Blockchain retrieveOrCreateBlockchain(String fileName) {

            Blockchain blockchain;
            try {
                blockchain = (Blockchain) Serializer
                                          .deserialize(fileName);
                System.out.println("Retrieving existing Blockchain");

            } catch (Exception e) {
                System.out.println(e.getMessage());
                System.out.println("Creating new Blockchain");
                blockchain = Blockchain.getInstance();
            }

            if (!Validator
                         .isBlockchainValid()) {
                System.out.println("Invalid blockchain! Creating new one");
                blockchain = Blockchain.getInstance();
            }
            return blockchain;
        }
    }
  learner_created: true
- name: src/blockchain/dao/Dao.java
  visible: true
  learner_created: true
- name: src/blockchain/services/FileManager.java
  visible: true
  learner_created: true
- name: src/blockchain/services/Verifier.java
  visible: true
  learner_created: true
- name: src/blockchain/dao/DaoImpl.java
  visible: true
  learner_created: true
- name: private.key
  visible: true
  learner_created: true
- name: src/blockchain/models/Block.java
  visible: true
  text: |-
    package blockchain.block;

    import blockchain.chat.Post;
    import blockchain.util.GeneratorForHash;
    import lombok.Getter;
    import java.io.Serial;
    import java.io.Serializable;
    import java.util.List;
    import java.util.Objects;
    import java.util.stream.Collectors;

    @Getter
    public class Block implements Serializable {

        @Serial
        private static final long serialVersionUID = 12L;
        private final int id;
        private final long timeStamp;
        private final int magicNumber;
        private final int generationDuration;
        private String changeOfNbOfZeros;
        private final String minerId;
        private final String hash;
        private final String hashOfPreviousBlock;
        private final List<Post> posts;

        public Block(int id,
                     String hashOfPreviousBlock,
                     long timestamp,
                     int magicNumber,
                     int generationDuration,
                     List<Post> posts,
                     String minerId) {
            this.id = id;
            this.hashOfPreviousBlock = hashOfPreviousBlock;
            this.magicNumber = magicNumber;
            this.generationDuration = generationDuration;
            this.timeStamp = timestamp;
            this.minerId = minerId;
            this.posts = posts;
            this.hash = GeneratorForHash
                                     .generate(hashOfPreviousBlock,
                                               id,
                                               timeStamp,
                                               magicNumber,
                                               posts,
                                               minerId);
        }

        public void setChangeOfZeros(int change) {
            switch (change) {
                case 0 -> this.changeOfNbOfZeros = "N stays the same";
                case 1 -> this.changeOfNbOfZeros = "N was increased by 1";
                case -1 -> this.changeOfNbOfZeros = "N was decreased by 1";
                default -> this.changeOfNbOfZeros = "?";
            }
        }
        @Override
        public String toString() {
            var strPosts = posts.isEmpty() ?
                    "no messages" : posts
                                   .stream()
                                   .map(Objects::toString)
                                   .collect(Collectors
                                              .joining("\n"));
            return String.format("Block: %n" +
                            "Created by Miner %s%n" +
                            "Id: %s%nTimestamp: %d%n" +
                            "Magic number: %d%n" +
                            "Hash of the previous block: %n%s%n" +
                            "Hash of the block: %n%s%n" +
                            "Block data:%n" +
                            "%s%n" +
                            "Block was generating for %d seconds%n" +
                            "%s%n",
                             minerId,
                             id,
                             timeStamp,
                             magicNumber,
                             hashOfPreviousBlock,
                             hash,
                             strPosts,
                             generationDuration,
                             changeOfNbOfZeros);
        }
    }
  learner_created: true
- name: src/blockchain/models/Blockchain.java
  visible: true
  learner_created: true
- name: src/blockchain/models/Dao.java
  visible: true
  learner_created: true
- name: src/blockchain/models/Miner.java
  visible: true
  learner_created: true
- name: src/blockchain/models/Transaction.java
  visible: true
  learner_created: true
- name: src/blockchain/managment/CryptoManager.java
  visible: true
  learner_created: true
- name: src/blockchain/managment/FileManager.java
  visible: true
  learner_created: true
- name: src/blockchain/managment/KeysManager.java
  visible: true
  learner_created: true
- name: src/blockchain/managment/TasksManager.java
  visible: true
  learner_created: true
- name: blockchain.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5418#comment
status: Solved
feedback:
  message: Congratulations!
  time: Wed, 26 Oct 2022 08:14:38 UTC
record: 6
